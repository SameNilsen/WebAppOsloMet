@model PostDetailsViewModel

@{
    ViewData["Title"] = @Model.Post.Title;
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
    /* Style buttons, from https://www.w3schools.com/howto/howto_css_icon_buttons.asp */
    .btn-arrow-up {
        color: black; /* White text */
        padding: 12px 16px; /* Some padding */
        font-size: 16px; /* Set a font size */
        cursor: pointer; /* Mouse pointer on hover */
    }

    .btn-arrow-down {
        color: black; /* White text */
        padding: 12px 16px; /* Some padding */
        font-size: 16px; /* Set a font size */
        cursor: pointer; /* Mouse pointer on hover */
    }
    /* Red background on mouse-over */
    .btn-arrow-up:hover {
        color: rgb(193, 26, 26);
    }

    /* blue background on mouse-over */
    .btn-arrow-down:hover {
        color: rgb(20, 130, 167);
    }
</style>

    <h3 class="my-5">
        @Model.Post.Title
    </h3>

    <div class="row gx-5">
        <img alt="@Model.Post.ImageUrl" src="@Model.Post.ImageUrl" class="img-fluid col-5"/>
        <div class="col-7">
            <h5>@Model.Post.Text</h5>
            <h5>Posted by: <a asp-controller="User" 
                                asp-action="UserProfile"
                          asp-route-id="@Model.Post.UserId">@Model.User.Name</a> @Model.User.Credebility creds
            </h5>
            <h5 class="pull-right">@Model.Post.PostDate</h5>
            <br />
            <h5 class="pull-right"><a asp-controller="Post" 
                                asp-action="SubForumPosts"
                                asp-route-CurrentViewName="@Model.Post.SubForum">@Model.Post.SubForum</a>
            </h5>
            @* These are injected because some buttons like update and delete 
                should only by available if the post is created by the logged in user.
            *@
            @using Microsoft.AspNetCore.Identity 
            @inject SignInManager<IdentityUser> SignInManager
            @inject UserManager<IdentityUser> UserManager

            @if (SignInManager.IsSignedIn(User) && Model.Post.User.IdentityUserId == UserManager.GetUserId(User))
            {
                <a asp-controller="Post" asp-action="Update" asp-route-id="@Model.Post.PostID" class="btn btn-secondary">Edit</a>  
                <a asp-controller="Post" asp-action="Delete" asp-route-id="@Model.Post.PostID" class="btn btn-danger">Delete</a>                        
            }
            <a class="btn btn-secondary" href="/Post/Posts">Back</a>

        @{  
            //  This is a complicated way of writing:
            //    string vote = ViewData["Vote"].ToString();
            //   but this way gives warnings of possible null reference. Since both the ToStrin()
            //   method and ViewData[] method gives this warning, this is implemented.
            string vote = (ViewData["Vote"] ?? "").ToString() ?? "";
        }
            @if (vote == "upvote")
            {
                <a class="btn-arrow-up" style="color: rgb(193, 26, 26);" asp-action="UpVote" asp-route-id="@Model.Post.PostID"><i class="fa fa-arrow-up"></i></a>
                <a class="btn-arrow-down" asp-action="DownVote" asp-route-id="@Model.Post.PostID"><i class="fa fa-arrow-down"></i></a>
            }
            else if (vote == "downvote")
            {
            <a class="btn-arrow-up" asp-action="UpVote" asp-route-id="@Model.Post.PostID"><i class="fa fa-arrow-up"></i></a>
            <a class="btn-arrow-down" style="color: rgb(20, 130, 167);" asp-action="DownVote" asp-route-id="@Model.Post.PostID"><i class="fa fa-arrow-down"></i></a>
            }
            else
            {
            <a class="btn-arrow-up" asp-action="UpVote" asp-route-id="@Model.Post.PostID"><i class="fa fa-arrow-up"></i></a>
            <a class="btn-arrow-down" asp-action="DownVote" asp-route-id="@Model.Post.PostID"><i class="fa fa-arrow-down"></i></a>
            }
            <span>@Model.Post.UpvoteCount</span>
        </div>
    </div>

    <br />

    @* COMMENTS: *@
    <div class="container">
        @* Create new Comment: *@
        <p>
            @* The javascript code is to toggle on and off the input field for creating or editing a comment. *@
            <script>
                function fun(id) {
                    var div = document.getElementById(id);
                    if (div.style.display == "block") {
                        div.style.display = "none";
                    }
                    else {
                        div.style.display = "block";
                    }
                }
                //  Toggle between edit comment mode or view comment mode.
                function toggleEdit(id) {
                    var divON = document.getElementById("editON "+id);
                    var divOFF = document.getElementById("editOFF "+id);
                    if (divON.style.display == "block") {
                        divON.style.display = "none";
                        divOFF.style.display = "block";
                    }
                    else {
                        divON.style.display = "block";
                        divOFF.style.display = "none";
                    }
                }
            </script>
            <button class="btn btn-secondary"
                onclick="fun('newComment')">Comment</button>
        </p>
        @* This form is for sending the new comment to the controller. *@
        <div asp-validation-summary="All" class="text-danger"></div>
        <div id="newComment" style="display :none">
            @using(Html.BeginForm("Create", "Comment"))
            {
                <input type="text" name="CommentText" />
                <input type="text" name="PostID" value="@Model.Post.PostID" hidden/>
                <button type="submit" class="btn btn-primary">Post</button>
            }
            
        </div>

        @* Displaying all comments. *@
        <h1>@ViewBag.CurrentViewName</h1>
        <table class="table table-striped">
            <tr>
                <th>ID</th>
                <th>Comment</th>
                <th>Date</th>
                <th>User</th>
            <th>
                <a asp-controller="User"
                   asp-action="CredsInfo">Creds</a>
            </th>
                <th>Actions</th>
            </tr>
            @foreach (var comment in Model.Post.Comments)
            {
                <tr>
                    <td>@comment.CommentID</td>
                    @* <---  This block is for editing and deleting a comment. *@
                    <td>
                        <div id="editON @comment.CommentID" style="display :none">
                            @using (Html.BeginForm("Update", "Comment"))
                            {
                                <input type="text" name="CommentText" value="@comment.CommentText" />
                                <input type="text" name="CommentID" value="@comment.CommentID" hidden />
                                <input type="text" name="PostDate" value="@comment.PostDate" hidden />
                                <input type="text" name="UserId" value="@comment.UserId" hidden />
                                <input type="text" name="PostID" value="@comment.PostID" hidden />
                                <button type="submit" class="btn btn-primary">Post</button>
                            }
                            <span>
                                <form asp-controller="Comment" asp-action="Delete" asp-route-id="@comment.CommentID" method="post">
                                    <button type="submit" class="btn btn-danger">Delete</button>
                                </form>
                            </span>
                        </div>
                    <div id="editOFF @comment.CommentID" style="display :block">@comment.CommentText</div>
                    @* ---> *@
                    </td>
                    <td>@comment.PostDate</td>
                    <td>@comment.User.Name</td>
                    <td>@comment.User.Credebility</td>
                    <td>
                        @* This is to make sure that one can only edit the comment you yourself has made. *@
                        @if (SignInManager.IsSignedIn(User) && comment.User.IdentityUserId == UserManager.GetUserId(User))
                        {
                            <button class="btn btn-secondary"
                                        onclick="toggleEdit(@comment.CommentID)">
                                    Edit
                            </button>
                        }
                        <a class="btn btn-secondary">Reply</a>
                    </td>
                </tr>
            }
        </table>
    </div>